// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: item-service/grpc/lead-grpc/lead-product.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddProductsToLeadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProductsToLeadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProductsToLeadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProductsToLeadRequestMultiError, or nil if none found.
func (m *AddProductsToLeadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProductsToLeadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := AddProductsToLeadRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddProductsToLeadRequestMultiError(errors)
	}

	return nil
}

// AddProductsToLeadRequestMultiError is an error wrapping multiple validation
// errors returned by AddProductsToLeadRequest.ValidateAll() if the designated
// constraints aren't met.
type AddProductsToLeadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProductsToLeadRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProductsToLeadRequestMultiError) AllErrors() []error { return m }

// AddProductsToLeadRequestValidationError is the validation error returned by
// AddProductsToLeadRequest.Validate if the designated constraints aren't met.
type AddProductsToLeadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductsToLeadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductsToLeadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductsToLeadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductsToLeadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductsToLeadRequestValidationError) ErrorName() string {
	return "AddProductsToLeadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductsToLeadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductsToLeadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductsToLeadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductsToLeadRequestValidationError{}

// Validate checks the field values on AddProductsToLeadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProductsToLeadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProductsToLeadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProductsToLeadResponseMultiError, or nil if none found.
func (m *AddProductsToLeadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProductsToLeadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return AddProductsToLeadResponseMultiError(errors)
	}

	return nil
}

// AddProductsToLeadResponseMultiError is an error wrapping multiple validation
// errors returned by AddProductsToLeadResponse.ValidateAll() if the
// designated constraints aren't met.
type AddProductsToLeadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProductsToLeadResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProductsToLeadResponseMultiError) AllErrors() []error { return m }

// AddProductsToLeadResponseValidationError is the validation error returned by
// AddProductsToLeadResponse.Validate if the designated constraints aren't met.
type AddProductsToLeadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductsToLeadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductsToLeadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductsToLeadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductsToLeadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductsToLeadResponseValidationError) ErrorName() string {
	return "AddProductsToLeadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductsToLeadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductsToLeadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductsToLeadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductsToLeadResponseValidationError{}

// Validate checks the field values on GetLeadProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLeadProductsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeadProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLeadProductsRequestMultiError, or nil if none found.
func (m *GetLeadProductsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeadProductsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetLeadProductsRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLeadProductsRequestMultiError(errors)
	}

	return nil
}

// GetLeadProductsRequestMultiError is an error wrapping multiple validation
// errors returned by GetLeadProductsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLeadProductsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeadProductsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeadProductsRequestMultiError) AllErrors() []error { return m }

// GetLeadProductsRequestValidationError is the validation error returned by
// GetLeadProductsRequest.Validate if the designated constraints aren't met.
type GetLeadProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeadProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeadProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeadProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeadProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeadProductsRequestValidationError) ErrorName() string {
	return "GetLeadProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLeadProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeadProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeadProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeadProductsRequestValidationError{}

// Validate checks the field values on GetLeadProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLeadProductsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeadProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLeadProductsResponseMultiError, or nil if none found.
func (m *GetLeadProductsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeadProductsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLeadProductsResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLeadProductsResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLeadProductsResponseValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProductId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLeadProductsResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLeadProductsResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLeadProductsResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLeadProductsResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLeadProductsResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLeadProductsResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLeadProductsResponseMultiError(errors)
	}

	return nil
}

// GetLeadProductsResponseMultiError is an error wrapping multiple validation
// errors returned by GetLeadProductsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLeadProductsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeadProductsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeadProductsResponseMultiError) AllErrors() []error { return m }

// GetLeadProductsResponseValidationError is the validation error returned by
// GetLeadProductsResponse.Validate if the designated constraints aren't met.
type GetLeadProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeadProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeadProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeadProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeadProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeadProductsResponseValidationError) ErrorName() string {
	return "GetLeadProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLeadProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeadProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeadProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeadProductsResponseValidationError{}

// Validate checks the field values on GetLeadsProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLeadsProductsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeadsProductsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLeadsProductsRequestMultiError, or nil if none found.
func (m *GetLeadsProductsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeadsProductsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEmpty()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLeadsProductsRequestValidationError{
					field:  "Empty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLeadsProductsRequestValidationError{
					field:  "Empty",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmpty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLeadsProductsRequestValidationError{
				field:  "Empty",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLeadsProductsRequestMultiError(errors)
	}

	return nil
}

// GetLeadsProductsRequestMultiError is an error wrapping multiple validation
// errors returned by GetLeadsProductsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLeadsProductsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeadsProductsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeadsProductsRequestMultiError) AllErrors() []error { return m }

// GetLeadsProductsRequestValidationError is the validation error returned by
// GetLeadsProductsRequest.Validate if the designated constraints aren't met.
type GetLeadsProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeadsProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeadsProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeadsProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeadsProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeadsProductsRequestValidationError) ErrorName() string {
	return "GetLeadsProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLeadsProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeadsProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeadsProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeadsProductsRequestValidationError{}

// Validate checks the field values on GetLeadsProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLeadsProductsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeadsProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLeadsProductsResponseMultiError, or nil if none found.
func (m *GetLeadsProductsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeadsProductsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLeadsProductsResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLeadsProductsResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLeadsProductsResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetLeadsProductsResponseMultiError(errors)
	}

	return nil
}

// GetLeadsProductsResponseMultiError is an error wrapping multiple validation
// errors returned by GetLeadsProductsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLeadsProductsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeadsProductsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeadsProductsResponseMultiError) AllErrors() []error { return m }

// GetLeadsProductsResponseValidationError is the validation error returned by
// GetLeadsProductsResponse.Validate if the designated constraints aren't met.
type GetLeadsProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeadsProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeadsProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeadsProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeadsProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeadsProductsResponseValidationError) ErrorName() string {
	return "GetLeadsProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLeadsProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeadsProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeadsProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeadsProductsResponseValidationError{}

// Validate checks the field values on PutProductsLeadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutProductsLeadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutProductsLeadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutProductsLeadRequestMultiError, or nil if none found.
func (m *PutProductsLeadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutProductsLeadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := PutProductsLeadRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PutProductsLeadRequestValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PutProductsLeadRequestValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PutProductsLeadRequestValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PutProductsLeadRequestMultiError(errors)
	}

	return nil
}

// PutProductsLeadRequestMultiError is an error wrapping multiple validation
// errors returned by PutProductsLeadRequest.ValidateAll() if the designated
// constraints aren't met.
type PutProductsLeadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutProductsLeadRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutProductsLeadRequestMultiError) AllErrors() []error { return m }

// PutProductsLeadRequestValidationError is the validation error returned by
// PutProductsLeadRequest.Validate if the designated constraints aren't met.
type PutProductsLeadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutProductsLeadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutProductsLeadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutProductsLeadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutProductsLeadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutProductsLeadRequestValidationError) ErrorName() string {
	return "PutProductsLeadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutProductsLeadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutProductsLeadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutProductsLeadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutProductsLeadRequestValidationError{}

// Validate checks the field values on PutProductsLeadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutProductsLeadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutProductsLeadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutProductsLeadResponseMultiError, or nil if none found.
func (m *PutProductsLeadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutProductsLeadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return PutProductsLeadResponseMultiError(errors)
	}

	return nil
}

// PutProductsLeadResponseMultiError is an error wrapping multiple validation
// errors returned by PutProductsLeadResponse.ValidateAll() if the designated
// constraints aren't met.
type PutProductsLeadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutProductsLeadResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutProductsLeadResponseMultiError) AllErrors() []error { return m }

// PutProductsLeadResponseValidationError is the validation error returned by
// PutProductsLeadResponse.Validate if the designated constraints aren't met.
type PutProductsLeadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutProductsLeadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutProductsLeadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutProductsLeadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutProductsLeadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutProductsLeadResponseValidationError) ErrorName() string {
	return "PutProductsLeadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PutProductsLeadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutProductsLeadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutProductsLeadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutProductsLeadResponseValidationError{}

// Validate checks the field values on DeleteLeadProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLeadProductsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLeadProductsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLeadProductsRequestMultiError, or nil if none found.
func (m *DeleteLeadProductsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLeadProductsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteLeadProductsRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteLeadProductsRequestMultiError(errors)
	}

	return nil
}

// DeleteLeadProductsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteLeadProductsRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteLeadProductsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLeadProductsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLeadProductsRequestMultiError) AllErrors() []error { return m }

// DeleteLeadProductsRequestValidationError is the validation error returned by
// DeleteLeadProductsRequest.Validate if the designated constraints aren't met.
type DeleteLeadProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLeadProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLeadProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLeadProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLeadProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLeadProductsRequestValidationError) ErrorName() string {
	return "DeleteLeadProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLeadProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLeadProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLeadProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLeadProductsRequestValidationError{}

// Validate checks the field values on DeleteLeadProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLeadProductsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLeadProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLeadProductsResponseMultiError, or nil if none found.
func (m *DeleteLeadProductsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLeadProductsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteLeadProductsResponseMultiError(errors)
	}

	return nil
}

// DeleteLeadProductsResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteLeadProductsResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteLeadProductsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLeadProductsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLeadProductsResponseMultiError) AllErrors() []error { return m }

// DeleteLeadProductsResponseValidationError is the validation error returned
// by DeleteLeadProductsResponse.Validate if the designated constraints aren't met.
type DeleteLeadProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLeadProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLeadProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLeadProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLeadProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLeadProductsResponseValidationError) ErrorName() string {
	return "DeleteLeadProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLeadProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLeadProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLeadProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLeadProductsResponseValidationError{}
