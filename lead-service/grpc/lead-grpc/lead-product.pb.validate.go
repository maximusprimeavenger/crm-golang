// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lead-service/grpc/lead-grpc/lead-product.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddProductsToLeadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProductsToLeadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProductsToLeadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProductsToLeadRequestMultiError, or nil if none found.
func (m *AddProductsToLeadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProductsToLeadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := AddProductsToLeadRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddProductsToLeadRequestMultiError(errors)
	}

	return nil
}

// AddProductsToLeadRequestMultiError is an error wrapping multiple validation
// errors returned by AddProductsToLeadRequest.ValidateAll() if the designated
// constraints aren't met.
type AddProductsToLeadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProductsToLeadRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProductsToLeadRequestMultiError) AllErrors() []error { return m }

// AddProductsToLeadRequestValidationError is the validation error returned by
// AddProductsToLeadRequest.Validate if the designated constraints aren't met.
type AddProductsToLeadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductsToLeadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductsToLeadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductsToLeadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductsToLeadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductsToLeadRequestValidationError) ErrorName() string {
	return "AddProductsToLeadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductsToLeadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductsToLeadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductsToLeadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductsToLeadRequestValidationError{}

// Validate checks the field values on AddProductsToLeadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProductsToLeadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProductsToLeadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProductsToLeadResponseMultiError, or nil if none found.
func (m *AddProductsToLeadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProductsToLeadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return AddProductsToLeadResponseMultiError(errors)
	}

	return nil
}

// AddProductsToLeadResponseMultiError is an error wrapping multiple validation
// errors returned by AddProductsToLeadResponse.ValidateAll() if the
// designated constraints aren't met.
type AddProductsToLeadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProductsToLeadResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProductsToLeadResponseMultiError) AllErrors() []error { return m }

// AddProductsToLeadResponseValidationError is the validation error returned by
// AddProductsToLeadResponse.Validate if the designated constraints aren't met.
type AddProductsToLeadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductsToLeadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductsToLeadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductsToLeadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductsToLeadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductsToLeadResponseValidationError) ErrorName() string {
	return "AddProductsToLeadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductsToLeadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductsToLeadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductsToLeadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductsToLeadResponseValidationError{}

// Validate checks the field values on DeleteLeadProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLeadProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLeadProductRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLeadProductRequestMultiError, or nil if none found.
func (m *DeleteLeadProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLeadProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteLeadProductRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProductId

	if len(errors) > 0 {
		return DeleteLeadProductRequestMultiError(errors)
	}

	return nil
}

// DeleteLeadProductRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteLeadProductRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteLeadProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLeadProductRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLeadProductRequestMultiError) AllErrors() []error { return m }

// DeleteLeadProductRequestValidationError is the validation error returned by
// DeleteLeadProductRequest.Validate if the designated constraints aren't met.
type DeleteLeadProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLeadProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLeadProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLeadProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLeadProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLeadProductRequestValidationError) ErrorName() string {
	return "DeleteLeadProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLeadProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLeadProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLeadProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLeadProductRequestValidationError{}

// Validate checks the field values on DeleteLeadProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLeadProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLeadProductResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLeadProductResponseMultiError, or nil if none found.
func (m *DeleteLeadProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLeadProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteLeadProductResponseMultiError(errors)
	}

	return nil
}

// DeleteLeadProductResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteLeadProductResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteLeadProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLeadProductResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLeadProductResponseMultiError) AllErrors() []error { return m }

// DeleteLeadProductResponseValidationError is the validation error returned by
// DeleteLeadProductResponse.Validate if the designated constraints aren't met.
type DeleteLeadProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLeadProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLeadProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLeadProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLeadProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLeadProductResponseValidationError) ErrorName() string {
	return "DeleteLeadProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLeadProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLeadProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLeadProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLeadProductResponseValidationError{}

// Validate checks the field values on DeleteLeadProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLeadProductsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLeadProductsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLeadProductsRequestMultiError, or nil if none found.
func (m *DeleteLeadProductsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLeadProductsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteLeadProductsRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteLeadProductsRequestMultiError(errors)
	}

	return nil
}

// DeleteLeadProductsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteLeadProductsRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteLeadProductsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLeadProductsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLeadProductsRequestMultiError) AllErrors() []error { return m }

// DeleteLeadProductsRequestValidationError is the validation error returned by
// DeleteLeadProductsRequest.Validate if the designated constraints aren't met.
type DeleteLeadProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLeadProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLeadProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLeadProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLeadProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLeadProductsRequestValidationError) ErrorName() string {
	return "DeleteLeadProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLeadProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLeadProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLeadProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLeadProductsRequestValidationError{}

// Validate checks the field values on DeleteLeadProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLeadProductsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLeadProductsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLeadProductsResponseMultiError, or nil if none found.
func (m *DeleteLeadProductsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLeadProductsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteLeadProductsResponseMultiError(errors)
	}

	return nil
}

// DeleteLeadProductsResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteLeadProductsResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteLeadProductsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLeadProductsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLeadProductsResponseMultiError) AllErrors() []error { return m }

// DeleteLeadProductsResponseValidationError is the validation error returned
// by DeleteLeadProductsResponse.Validate if the designated constraints aren't met.
type DeleteLeadProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLeadProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLeadProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLeadProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLeadProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLeadProductsResponseValidationError) ErrorName() string {
	return "DeleteLeadProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLeadProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLeadProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLeadProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLeadProductsResponseValidationError{}
