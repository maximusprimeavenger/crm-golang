// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: lead-service/grpc/lead-grpc/lead-product.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LeadProductService_AddProductsToLead_FullMethodName  = "/proto.LeadProductService/AddProductsToLead"
	LeadProductService_DeleteLeadProducts_FullMethodName = "/proto.LeadProductService/DeleteLeadProducts"
	LeadProductService_DeleteLeadProduct_FullMethodName  = "/proto.LeadProductService/DeleteLeadProduct"
)

// LeadProductServiceClient is the client API for LeadProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeadProductServiceClient interface {
	AddProductsToLead(ctx context.Context, in *AddProductsToLeadRequest, opts ...grpc.CallOption) (*AddProductsToLeadResponse, error)
	DeleteLeadProducts(ctx context.Context, in *DeleteLeadProductsRequest, opts ...grpc.CallOption) (*DeleteLeadProductsResponse, error)
	DeleteLeadProduct(ctx context.Context, in *DeleteLeadProductRequest, opts ...grpc.CallOption) (*DeleteLeadProductResponse, error)
}

type leadProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeadProductServiceClient(cc grpc.ClientConnInterface) LeadProductServiceClient {
	return &leadProductServiceClient{cc}
}

func (c *leadProductServiceClient) AddProductsToLead(ctx context.Context, in *AddProductsToLeadRequest, opts ...grpc.CallOption) (*AddProductsToLeadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductsToLeadResponse)
	err := c.cc.Invoke(ctx, LeadProductService_AddProductsToLead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadProductServiceClient) DeleteLeadProducts(ctx context.Context, in *DeleteLeadProductsRequest, opts ...grpc.CallOption) (*DeleteLeadProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLeadProductsResponse)
	err := c.cc.Invoke(ctx, LeadProductService_DeleteLeadProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadProductServiceClient) DeleteLeadProduct(ctx context.Context, in *DeleteLeadProductRequest, opts ...grpc.CallOption) (*DeleteLeadProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLeadProductResponse)
	err := c.cc.Invoke(ctx, LeadProductService_DeleteLeadProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeadProductServiceServer is the server API for LeadProductService service.
// All implementations must embed UnimplementedLeadProductServiceServer
// for forward compatibility.
type LeadProductServiceServer interface {
	AddProductsToLead(context.Context, *AddProductsToLeadRequest) (*AddProductsToLeadResponse, error)
	DeleteLeadProducts(context.Context, *DeleteLeadProductsRequest) (*DeleteLeadProductsResponse, error)
	DeleteLeadProduct(context.Context, *DeleteLeadProductRequest) (*DeleteLeadProductResponse, error)
	mustEmbedUnimplementedLeadProductServiceServer()
}

// UnimplementedLeadProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLeadProductServiceServer struct{}

func (UnimplementedLeadProductServiceServer) AddProductsToLead(context.Context, *AddProductsToLeadRequest) (*AddProductsToLeadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductsToLead not implemented")
}
func (UnimplementedLeadProductServiceServer) DeleteLeadProducts(context.Context, *DeleteLeadProductsRequest) (*DeleteLeadProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeadProducts not implemented")
}
func (UnimplementedLeadProductServiceServer) DeleteLeadProduct(context.Context, *DeleteLeadProductRequest) (*DeleteLeadProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeadProduct not implemented")
}
func (UnimplementedLeadProductServiceServer) mustEmbedUnimplementedLeadProductServiceServer() {}
func (UnimplementedLeadProductServiceServer) testEmbeddedByValue()                            {}

// UnsafeLeadProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeadProductServiceServer will
// result in compilation errors.
type UnsafeLeadProductServiceServer interface {
	mustEmbedUnimplementedLeadProductServiceServer()
}

func RegisterLeadProductServiceServer(s grpc.ServiceRegistrar, srv LeadProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedLeadProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LeadProductService_ServiceDesc, srv)
}

func _LeadProductService_AddProductsToLead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductsToLeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadProductServiceServer).AddProductsToLead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadProductService_AddProductsToLead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadProductServiceServer).AddProductsToLead(ctx, req.(*AddProductsToLeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadProductService_DeleteLeadProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeadProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadProductServiceServer).DeleteLeadProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadProductService_DeleteLeadProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadProductServiceServer).DeleteLeadProducts(ctx, req.(*DeleteLeadProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadProductService_DeleteLeadProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeadProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadProductServiceServer).DeleteLeadProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeadProductService_DeleteLeadProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadProductServiceServer).DeleteLeadProduct(ctx, req.(*DeleteLeadProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeadProductService_ServiceDesc is the grpc.ServiceDesc for LeadProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeadProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LeadProductService",
	HandlerType: (*LeadProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductsToLead",
			Handler:    _LeadProductService_AddProductsToLead_Handler,
		},
		{
			MethodName: "DeleteLeadProducts",
			Handler:    _LeadProductService_DeleteLeadProducts_Handler,
		},
		{
			MethodName: "DeleteLeadProduct",
			Handler:    _LeadProductService_DeleteLeadProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lead-service/grpc/lead-grpc/lead-product.proto",
}
